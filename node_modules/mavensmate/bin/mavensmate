#!/usr/bin/env node
'use strict';

process.title = 'mavensmate cli';

var program     = require('commander');
var mavensmate  = require('../lib/mavensmate');
var pjson       = require('../package.json');

// initialize top-level program with global options
program
  .version(pjson.version)
  .option('-v --verbose', 'Output logging statements')
  .option('-h --headless', 'Runs in headless (non-interactive terminal) mode. You may wish to use this flag when calling this executable from a text editor or IDE client.')
  .option('-e --editor [name]', 'Specifies the plugin client (sublime, atom)') // no default set
  .option('-p --port [number]', 'UI server port number') // (for sublime text)
  .parse(process.argv, true); // parse top-level args, defer subcommand

var cliClient = mavensmate.createClient({
  editor: program.editor || 'atom',
  headless: program.headless || false,
  verbose: program.verbose || false,
  program: program
});

if (program.port) {
  process.env.MAVENSMATE_UI_SERVER_PORT = program.port;
}

var logger = require('winston');
  
// output top-line help
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ mavensmate -e sublime new-project');
  console.log('    $ mavensmate -v edit-project --ui');
  console.log('');
});

// if no command is specified and help is not specified, show help
if (program.args.length < 1 ) {
  program.outputHelp();
  process.exit(1);
}

program.log = logger; // because autocmdr uses program.log (TODO: remove reliance on autocmdr)

require('../lib/mavensmate/loader')(cliClient);
require('autocmdr/lib/completion')(program);
require('autocmdr/lib/package')(program);
require('autocmdr/lib/help')(program);

logger.debug('\n\n=====> EXECUTING VIA CLI:\n');
logger.debug(JSON.stringify(process.argv));

var projectExemptCommands = [
  'new-project',
  'session'
];
var commandName = program.args[0];

// not all command needs a project
if (projectExemptCommands.indexOf(commandName) === -1) {
  cliClient.setProject(process.cwd(), function(err) {
    if (err) {
      console.error('Could not set project: '+err.message+ ', '+err.stack);
      process.exit(1);
    }
    program.parse(process.argv); // run subcommand if necessary
  });
} else {
  program.parse(process.argv); // run subcommand if necessary
}
